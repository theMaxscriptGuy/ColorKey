// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
RWTexture2D<float4> renderImage;
Texture2D<float4> camVideoFeed;

float rThreshold;
float gThreshold;
float bThreshold;
float3 keyColor;
float3 color;

#define min_f(a,b,c) (min(a,min(b,c)))
#define max_f(a,b,c) (max(a,max(b,c)))


float3 rgb2hsv(float src_r, float src_g, float src_b)
{
	float r = src_r / 255.0f;
	float g = src_g / 255.0f;
	float b = src_b / 255.0f;

	float h, s, v; // h:0-360.0, s:0.0-1.0, v:0.0-1.0

	float maxVal = max_f(r, g, b);
	float minVal = min_f(r, g, b);

	v = maxVal;

	if (maxVal == 0.0f) {
		s = 0;
		h = 0;
	}
	else if (maxVal - minVal == 0.0f) {
		s = 0;
		h = 0;
	}
	else {
		s = (maxVal - minVal) / maxVal;

		if (maxVal == r) {
			h = 60 * ((g - b) / (maxVal - minVal)) + 0;
		}
		else if (maxVal == g) {
			h = 60 * ((b - r) / (maxVal - minVal)) + 120;
		}
		else {
			h = 60 * ((r - g) / (maxVal - minVal)) + 240;
		}
	}

	if (h < 0) h += 360.0f;

	float dst_h = (h / 2);   // dst_h : 0-180
	float dst_s = (s * 255); // dst_s : 0-255
	float dst_v = (v * 255); // dst_v : 0-255
	return float3(dst_h, dst_s, dst_v);
}


[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    // TODO: insert actual code here!

	/*renderImage[id.xy] = float4(id.x & id.y, (id.x & 15)/15.0, (id.y & 15)/15.0, 0.0);*/
	
	renderImage[id.xy] = camVideoFeed[id.xy];
	float3 keyColorHSV = rgb2hsv(keyColor.r, keyColor.g, keyColor.b);
	color = rgb2hsv(renderImage[id.xy].r, renderImage[id.xy].g, renderImage[id.xy].b);
	if (
		color.r >= (keyColorHSV.r - rThreshold) && color.r <= (keyColorHSV.r + rThreshold) &&
		color.g >= (keyColorHSV.g - gThreshold) && color.g <= (keyColorHSV.g + gThreshold) &&
		color.b >= (keyColorHSV.b - bThreshold) && color.b <= (keyColorHSV.b + bThreshold)
		//color.b >= (keyColorHSV.b - bThreshold) && color.b <= (keyColorHSV.b + bThreshold)
		)
	{
		renderImage[id.xy] = float4(renderImage[id.xy].rgb, 0.0);
	}
	/*if (
			color.r >= (keyColor.r - rThreshold) && color.r <= (keyColor.r + rThreshold) &&
			color.g >= (keyColor.g - gThreshold) && color.g <= (keyColor.g + gThreshold) &&
			color.b >= (keyColor.b - bThreshold) && color.b <= (keyColor.b + bThreshold)
		)
	{
		renderImage[id.xy] = float4(renderImage[id.xy].rgb, 0.0);
	}*/
}

/*color = renderImage[id.xy].rgb;

if (color.r == color.g == color.b ||
	color.r > rThreshold || color.g > gThreshold)
{

}
else
{
	if (color.b > color.r && color.b > color.g)
	{
		if (color.b > bThreshold)
		{
			renderImage[id.xy] = float4(renderImage[id.xy].rgb, 0.0);
		}
	}
}*/